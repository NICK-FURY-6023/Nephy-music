import { RainlinkSearchOptions, RainlinkSearchResult } from 'rainlink';
import { Rainlink } from 'rainlink';
import { SourceRainlinkPlugin } from 'rainlink';
import { RainlinkPluginType } from 'rainlink';
export declare class RainlinkPlugin extends SourceRainlinkPlugin {
    private manager;
    private _search?;
    private readonly methods;
    /**
   * Source identify of the plugin
   * @returns string
   */
    sourceIdentify(): string;
    /**
   * Source name of the plugin
   * @returns string
   */
    sourceName(): string;
    /**
   * Type of the plugin
   * @returns RainlinkPluginType
   */
    type(): RainlinkPluginType;
    /**
   * Initialize the plugin.
   */
    constructor();
    /**
   * load the plugin
   * @param rainlink The rainlink class
   */
    load(manager: Rainlink): void;
    /**
   * Unload the plugin
   * @param rainlink The rainlink class
   */
    unload(rainlink: Rainlink): void;
    /** Name function for getting plugin name */
    name(): string;
    protected search(query: string, options?: RainlinkSearchOptions): Promise<RainlinkSearchResult>;
    /**
   * Directly search from plugin
   * @param query URI or track name query
   * @param options search option like RainlinkSearchOptions
   * @returns RainlinkSearchResult
   */
    searchDirect(query: string, options?: RainlinkSearchOptions | undefined): Promise<RainlinkSearchResult>;
    private searchTrack;
    private getTrack;
    private getAlbum;
    private getPlaylist;
    private filterNullOrUndefined;
    private buildSearch;
    private buildRainlinkTrack;
    private debug;
}
//# sourceMappingURL=plugin.d.ts.map