'use strict';

var o = require('fs');
var a = require('path');
var f = require('yaml');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var o__default = /*#__PURE__*/_interopDefault(o);
var a__default = /*#__PURE__*/_interopDefault(a);
var f__default = /*#__PURE__*/_interopDefault(f);

var y=class{locales=new Map;directory;defaultLocale;constants;constructor(t){if(this.defaultLocale=t.defaultLocale,this.directory=a__default.default.resolve(t.directory?t.directory:"./locales"),o__default.default.readdirSync(this.directory).filter(r=>o__default.default.statSync(a__default.default.join(this.directory,r)).isDirectory()).forEach(r=>{let n=new Map;o__default.default.readdirSync(a__default.default.join(this.directory,r)).filter(i=>!o__default.default.statSync(a__default.default.join(this.directory,r,i)).isDirectory()).filter(i=>i.endsWith(".yaml")).forEach(i=>{let g=a__default.default.join(this.directory,r,i),l=o__default.default.readFileSync(g,"utf8"),c=f__default.default.parse(l);n.set(i.replace(".yaml",""),c);}),this.locales.set(r,n);}),o__default.default.existsSync(a__default.default.join(this.directory,"constants.yaml"))){let r=a__default.default.join(this.directory,"constants.yaml"),n=o__default.default.readFileSync(r,"utf8"),e=f__default.default.parse(n);this.constants=e;}}resolveString(t,s,r){let n=this.locales.get(t)||this.locales.get(this.defaultLocale);if(!n)return `Locale '${t}' not found.`;let e=n.get(s);if(!e)return `Section '${s}' not found in locale '${t}'`;let i=e[r];return i||`Key '${r}' not found in section ${s} in locale '${t}'`}replace(t,s){if(s)for(let n in s){let e=new RegExp(`%{${n}}`,"gm");t=t.replace(e,s[n]);}let r=this.constants;if(r)for(let n in r){let e=new RegExp(`%{${n}}`,"gm");t=t.replace(e,r[n]);}return t}getLocales=()=>Array.from(this.locales.keys());getConstant=t=>this.constants&&this.constants[t]?this.constants[t]:void 0;toJSON(t){let s={constants:this.constants};return this.getLocales().forEach(n=>{let e={},i=this.locales.get(n);Array.from(i.keys()).forEach(l=>{let c=i.get(l);for(let p in c)c[p]=this.replace(c[p],t);e[l]=c;}),s[n]=e;}),s}get(t,s,r,n){let e=this.resolveString(t,s,r);return this.replace(e,n)}};

exports.I18n = y;
