"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lyricist = void 0;
const axios_1 = require("axios");
const user_agents_1 = __importDefault(require("user-agents"));
const cheerio_1 = require("cheerio");
const node_url_1 = require("node:url");
const built_in_plugins = __importStar(require("./plugins"));
class Lyricist {
    #saveLastResult;
    #lastCall;
    #randomUserAgent;
    constructor(options) {
        /** A map of all available plugins */
        this.plugins = new Map();
        this.#randomUserAgent = new user_agents_1.default({ deviceCategory: "desktop" }).random;
        const plugins = Object.values(built_in_plugins);
        if (options?.plugins) {
            if (!Array.isArray(options.plugins)) {
                throw new TypeError("Expected plugins to be an array");
            }
            plugins.push(...options.plugins);
        }
        for (const plugin of plugins) {
            if (typeof plugin !== "function" ||
                plugin.constructor.name !== "AsyncFunction") {
                throw new TypeError("Expected plugin to be an async function");
            }
            this.plugins.set(plugin.name.replace(/__/g, "-").replace(/_/g, "."), plugin);
        }
        if (options?.saveLastResult) {
            this.#saveLastResult = true;
        }
    }
    /**
     * Fetch a lyric by query; minimum recommended delay: 3s
     * @param query Name of the song or full query
     * @param attempt Number of attempts to make if Google doesn't have the lyric
     * @returns {Promise<LyricResult>}
     */
    async fetch(query, attempt) {
        if (typeof this.#lastCall === "number" &&
            Date.now() - this.#lastCall <= 3_000) {
            throw new Error("Spam. You should delay every request by atleast 3s");
        }
        this.#lastCall = Date.now();
        const queryUrl = `https://www.google.com/search?q=${encodeURIComponent(query.concat(" lyrics"))}`;
        const userAgent = this.#randomUserAgent().toString();
        const { data } = await (0, axios_1.get)(queryUrl, {
            headers: {
                "User-Agent": userAgent
            }
        });
        const $ = (0, cheerio_1.load)(data);
        const searchResult = {};
        // title & subtitle
        {
            const title = $("div[data-attrid=title]").text().trim();
            const subtitle = $("div[data-attrid=subtitle]").text().trim();
            if (title.length !== 0 && subtitle.length !== 0) {
                searchResult.song = { title, subtitle };
            }
        }
        // info
        {
            const info = [];
            $("div[id=rhs] div[data-attrid*=music]").each((i, div) => {
                const label = $(div).find("span:first").text().trim();
                const value = $(div).find("span:nth-of-type(2):first").text().trim();
                if (label.length !== 0 && value.length !== 0) {
                    info.push({ label, value });
                }
            });
            if (info.length !== 0) {
                searchResult.info = info;
            }
        }
        // listen
        {
            const listen = [];
            $("div[data-attrid*=action:listen] a:has(div)").each((i, link) => {
                const source = $(link)
                    .find("div:first > div:nth-of-type(2)")
                    .text()
                    .trim();
                const stream = $(link).attr("href");
                if (source.length !== 0) {
                    listen.push({ source, stream });
                }
            });
            if (listen.length !== 0) {
                searchResult.listen = listen;
            }
        }
        // lyrics
        {
            const lyrics = [];
            $("div[data-lyricid] > div:first > div:nth-of-type(2) > div:has(span)").each((i, div) => {
                let lyric = "";
                $(div)
                    .find("span")
                    .each((j, span) => {
                    lyric += $(span).text().trim().concat("\n");
                });
                lyrics.push(lyric);
            });
            if (lyrics.length !== 0) {
                searchResult.lyrics = lyrics.join("\n").trimEnd();
                searchResult.source = {
                    name: "google.com",
                    url: queryUrl
                };
                if (this.#saveLastResult) {
                    this.lastResult = searchResult;
                }
                return searchResult;
            }
        }
        // fallback attempts
        const results = [];
        const plugins = [...this.plugins.keys()];
        $("div[data-async-context^=query:] div[data-snc] div > span > a").each((i, link) => {
            const url = new node_url_1.URL($(link).attr("href"));
            if (url.pathname.length <= 1) {
                return;
            }
            for (const name of plugins) {
                if (url.hostname.includes(name)) {
                    results.push({
                        name: name,
                        url: url.href
                    });
                    plugins.splice(plugins.indexOf(name), 1);
                    return;
                }
            }
        });
        if (results.length === 0) {
            throw new Error("No supported plugin(s) found for any of the fallback result(s)");
        }
        let limit = results.length;
        if (typeof attempt === "number" &&
            Number.isInteger(attempt) &&
            attempt >= 0) {
            limit = attempt;
        }
        const result = await Promise.any(results.slice(0, limit).map((query) => this.plugins.get(query.name)(query.url, userAgent).then((data) => ({
            lyrics: data,
            source: query
        }))));
        // the check below is to ensure that
        // no plugin resolves something invalid
        if (typeof result.lyrics !== "string" || result.lyrics.length === 0) {
            throw new Error("One of the plugins resolved an unexpected value", {
                cause: {
                    value: {
                        type: typeof result.lyrics,
                        name: result.lyrics?.constructor?.name
                    },
                    source: result.source
                }
            });
        }
        searchResult.lyrics = result.lyrics;
        searchResult.source = result.source;
        if (this.#saveLastResult) {
            this.lastResult = searchResult;
        }
        return searchResult;
    }
}
exports.Lyricist = Lyricist;
