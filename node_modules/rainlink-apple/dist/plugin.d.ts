import { RainlinkSearchOptions, RainlinkSearchResult } from 'rainlink';
import { Rainlink } from 'rainlink';
import { RainlinkTrack } from 'rainlink';
import { SourceRainlinkPlugin } from 'rainlink';
import { RainlinkPluginType } from 'rainlink';
/** The rainlink spotify plugin options */
export type AppleOptions = {
    /** The country code that u want to set content, eg: en */
    countryCode?: string;
    /** Artwork width */
    imageWidth?: number;
    /** Artwork height */
    imageHeight?: number;
};
export declare class RainlinkPlugin extends SourceRainlinkPlugin {
    options: AppleOptions;
    private manager;
    private _search?;
    private readonly methods;
    private credentials;
    private fetchURL;
    private baseURL;
    countryCode: string;
    imageWidth: number;
    imageHeight: number;
    /**
   * Source identify of the plugin
   * @returns string
   */
    sourceIdentify(): string;
    /**
   * Source name of the plugin
   * @returns string
   */
    sourceName(): string;
    /**
   * Type of the plugin
   * @returns RainlinkPluginType
   */
    type(): RainlinkPluginType;
    /** Name function for getting plugin name */
    name(): string;
    /**
   * Initialize the plugin.
   * @param appleOptions The rainlink apple plugin options
   */
    constructor(appleOptions: AppleOptions);
    /**
   * load the plugin
   * @param rainlink The rainlink class
   */
    load(manager: Rainlink): void;
    /**
   * Unload the plugin
   * @param rainlink The rainlink class
   */
    unload(rainlink: Rainlink): void;
    protected search(query: string, options?: RainlinkSearchOptions): Promise<RainlinkSearchResult>;
    /**
   * Directly search from plugin
   * @param query URI or track name query
   * @param options search option like RainlinkSearchOptions
   * @returns RainlinkSearchResult
   */
    searchDirect(query: string, options?: RainlinkSearchOptions | undefined): Promise<RainlinkSearchResult>;
    private getData;
    private searchTrack;
    private getTrack;
    private getArtist;
    private getAlbum;
    private getPlaylist;
    private filterNullOrUndefined;
    private buildSearch;
    private buildRainlinkTrack;
    private debug;
}
/** @ignore */
export interface Result {
    tracks: RainlinkTrack[];
    name?: string;
}
/** @ignore */
export interface Track {
    id: string;
    type: string;
    href: string;
    attributes: TrackAttributes;
}
/** @ignore */
export interface TrackAttributes {
    albumName: string;
    hasTimeSyncedLyrics: boolean;
    genreNames: any[];
    trackNumber: number;
    releaseDate: string;
    durationInMillis: number;
    isVocalAttenuationAllowed: boolean;
    isMasteredForItunes: boolean;
    isrc: string;
    artwork: Record<string, any>;
    audioLocale: string;
    composerName: string;
    url: string;
    playParams: Record<string, any>;
    discNumber: number;
    hasCredits: boolean;
    hasLyrics: boolean;
    isAppleDigitalMaster: boolean;
    audioTraits: any[];
    name: string;
    previews: any[];
    artistName: string;
}
//# sourceMappingURL=plugin.d.ts.map