import { RainlinkPluginType } from 'rainlink';
import { RainlinkSearchOptions, RainlinkSearchResult } from 'rainlink';
import { RainlinkTrack } from 'rainlink';
import { Rainlink } from 'rainlink';
import { SourceRainlinkPlugin } from 'rainlink';
/** The rainlink spotify plugin options */
export interface SpotifyOptions {
    /** The client ID of your Spotify application. */
    clientId: string;
    /** The client secret of your Spotify application. */
    clientSecret: string;
    /** The clients for multiple spotify applications. NOT RECOMMENDED */
    clients?: {
        clientId: string;
        clientSecret: string;
    }[];
    /** 100 tracks per page */
    playlistPageLimit?: number;
    /** 50 tracks per page */
    albumPageLimit?: number;
    /** The track limit when searching track */
    searchLimit?: number;
    /** Enter the country you live in. ( Can only be of 2 letters. For eg: US, IN, EN) */
    searchMarket?: string;
}
export declare class RainlinkPlugin extends SourceRainlinkPlugin {
    /**
   * The options of the plugin.
   */
    options: SpotifyOptions;
    private _search;
    private rainlink;
    private readonly methods;
    private requestManager;
    /**
   * Initialize the plugin.
   * @param spotifyOptions Options for run plugin
   */
    constructor(spotifyOptions: SpotifyOptions);
    /**
   * Source identify of the plugin
   * @returns string
   */
    sourceIdentify(): string;
    /**
   * Source name of the plugin
   * @returns string
   */
    sourceName(): string;
    /**
   * Type of the plugin
   * @returns RainlinkPluginType
   */
    type(): RainlinkPluginType;
    /**
   * load the plugin
   * @param rainlink The rainlink class
   */
    load(rainlink: Rainlink): void;
    /**
   * Unload the plugin
   * @param rainlink The rainlink class
   */
    unload(rainlink: Rainlink): void;
    /** Name function for getting plugin name */
    name(): string;
    protected search(query: string, options?: RainlinkSearchOptions): Promise<RainlinkSearchResult>;
    /**
   * Directly search from plugin
   * @param query URI or track name query
   * @param options search option like RainlinkSearchOptions
   * @returns RainlinkSearchResult
   */
    searchDirect(query: string, options?: RainlinkSearchOptions | undefined): Promise<RainlinkSearchResult>;
    private buildSearch;
    private searchTrack;
    private getTrack;
    private getAlbum;
    private getArtist;
    private getPlaylist;
    private filterNullOrUndefined;
    private buildrainlinkTrack;
}
/** @ignore */
export interface SearchResult {
    tracks: Tracks;
}
/** @ignore */
export interface Result {
    tracks: RainlinkTrack[];
    name?: string;
}
/** @ignore */
export interface TrackResult {
    album: Album;
    artists: Artist[];
    available_markets: string[];
    disc_number: number;
    duration_ms: number;
    explicit: boolean;
    external_ids: ExternalIds;
    external_urls: ExternalUrls;
    href: string;
    id: string;
    is_local: boolean;
    name: string;
    popularity: number;
    preview_url: string;
    track: any;
    track_number: number;
    type: string;
    uri: string;
}
/** @ignore */
export interface AlbumResult {
    album_type: string;
    artists: Artist[];
    available_markets: string[];
    copyrights: Copyright[];
    external_ids: ExternalIds;
    external_urls: ExternalUrls;
    genres: string[];
    href: string;
    id: string;
    images: Image[];
    label: string;
    name: string;
    popularity: number;
    release_date: string;
    release_date_precision: string;
    total_tracks: number;
    tracks: Tracks;
    type: string;
    uri: string;
}
/** @ignore */
export interface ArtistResult {
    tracks: Track[];
}
/** @ignore */
export interface PlaylistResult {
    collaborative: boolean;
    description: string;
    external_urls: ExternalUrls;
    followers: Followers;
    href: string;
    id: string;
    images: Image[];
    name: string;
    owner: Owner;
    primary_color: string | null;
    public: boolean;
    snapshot_id: string;
    tracks: PlaylistTracks;
    type: string;
    uri: string;
}
/** @ignore */
export interface Owner {
    display_name: string;
    external_urls: ExternalUrls;
    href: string;
    id: string;
    type: string;
    uri: string;
}
/** @ignore */
export interface Followers {
    href: string | null;
    total: number;
}
/** @ignore */
export interface Tracks {
    href: string;
    items: Track[];
    next: string | null;
}
/** @ignore */
export interface PlaylistTracks {
    href: string;
    items: SpecialTracks[];
    limit: number;
    next: string | null;
    offset: number;
    previous: string | null;
    total: number;
}
/** @ignore */
export interface SpecialTracks {
    added_at: string;
    is_local: boolean;
    primary_color: string | null;
    track: Track;
}
/** @ignore */
export interface Copyright {
    text: string;
    type: string;
}
/** @ignore */
export interface ExternalUrls {
    spotify: string;
}
/** @ignore */
export interface ExternalIds {
    isrc: string;
}
/** @ignore */
export interface Album {
    album_type: string;
    artists: Artist[];
    available_markets: string[];
    external_urls: {
        [key: string]: string;
    };
    href: string;
    id: string;
    images: Image[];
    name: string;
    release_date: string;
    release_date_precision: string;
    total_tracks: number;
    type: string;
    uri: string;
}
/** @ignore */
export interface Image {
    height: number;
    url: string;
    width: number;
}
/** @ignore */
export interface Artist {
    external_urls: {
        spotify: string;
    };
    followers: {
        href: string;
        total: number;
    };
    genres: [];
    href: string;
    id: string;
    images: Image[];
    name: string;
    popularity: number;
    type: string;
    uri: string;
}
/** @ignore */
export interface Track {
    album?: Album;
    artists: Artist[];
    available_markets: string[];
    disc_number: number;
    duration_ms: number;
    explicit: boolean;
    external_urls: ExternalUrls;
    href: string;
    id: string;
    is_local: boolean;
    name: string;
    preview_url: string;
    track_number: number;
    type: string;
    uri: string;
}
//# sourceMappingURL=plugin.d.ts.map